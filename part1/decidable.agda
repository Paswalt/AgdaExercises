import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl)
open Eq.‚â°-Reasoning
open import Data.Nat using (‚Ñï; zero; suc)
open import Data.Product using (_√ó_) renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Relation.Nullary using (¬¨_)
open import Relation.Nullary.Negation using ()
  renaming (contradiction to ¬¨¬¨-intro)
open import Data.Unit using (‚ä§; tt)
open import Data.Empty using (‚ä•; ‚ä•-elim)
open import relations using (_<_; z<s; _‚â§_; z‚â§n; s‚â§s)
open import isomorphism using (_‚áî_)


-- We look at the difference between evidence and computation based relations
-- Previously we defined ‚â§ as an inductive datatype over evidence but
-- we can also model it as a function from naturals to booleans
data ùîπ : Set where
  true  : ùîπ
  false : ùîπ

_‚â§·µá_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùîπ
zero ‚â§·µá n = true
suc m ‚â§·µá zero = false
suc m ‚â§·µá suc n = m ‚â§·µá n

infix 4 _‚â§·µá_

-- We can prove the following with that
_ : (2 ‚â§·µá 4) ‚â° true
_ = refl

_ : (4 ‚â§·µá 2) ‚â° false
_ = refl

-- We can now relate computation and evidence with the help of the following function
T : ùîπ ‚Üí Set
T true = ‚ä§
T false = ‚ä•
-- This means whenever we have a T b, the resulting type is only inhabited if b is true

-- With this we can show that both ‚â§·µá‚Üí‚â§ and ‚â§ ‚Üí ‚â§·µá
‚â§·µá‚Üí‚â§ : ‚àÄ (m n : ‚Ñï) ‚Üí T (m ‚â§·µá n) ‚Üí m ‚â§ n
‚â§·µá‚Üí‚â§ zero n t = z‚â§n
‚â§·µá‚Üí‚â§ (suc m) n t = {!!}
