import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl)
open Eq.‚â°-Reasoning
open import Data.Nat using (‚Ñï; zero; suc)
open import Data.Product using (_√ó_) renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Relation.Nullary using (¬¨_)
open import Relation.Nullary.Negation using ()
  renaming (contradiction to ¬¨¬¨-intro)
open import Data.Unit using (‚ä§; tt)
open import Data.Empty using (‚ä•; ‚ä•-elim)
open import relations using (_<_; z<s; s<s; _‚â§_; z‚â§n; s‚â§s)
open import isomorphism using (_‚áî_)


-- We look at the difference between evidence and computation based relations
-- Previously we defined ‚â§ as an inductive datatype over evidence but
-- we can also model it as a function from naturals to booleans
data ùîπ : Set where
  true  : ùîπ
  false : ùîπ

_‚â§·µá_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùîπ
zero ‚â§·µá n = true
suc m ‚â§·µá zero = false
suc m ‚â§·µá suc n = m ‚â§·µá n

infix 4 _‚â§·µá_

-- We can prove the following with that
_ : (2 ‚â§·µá 4) ‚â° true
_ = refl

_ : (4 ‚â§·µá 2) ‚â° false
_ = refl

-- We can now relate computation and evidence with the help of the following function
T : ùîπ ‚Üí Set
T true = ‚ä§
T false = ‚ä•
-- This means whenever we have a T b, the resulting type is only inhabited if b is true

-- With this we can show that both ‚â§·µá‚Üí‚â§ and ‚â§ ‚Üí ‚â§·µá
‚â§·µá‚Üí‚â§ : ‚àÄ (m n : ‚Ñï) ‚Üí T (m ‚â§·µá n) ‚Üí m ‚â§ n
‚â§·µá‚Üí‚â§ zero n t = z‚â§n
‚â§·µá‚Üí‚â§ (suc m) (suc n) t = s‚â§s (‚â§·µá‚Üí‚â§ m n t)

‚â§‚Üí‚â§·µá : ‚àÄ (m n : ‚Ñï) ‚Üí m ‚â§ n ‚Üí T (m ‚â§·µá n)
‚â§‚Üí‚â§·µá zero n m‚â§n = tt
‚â§‚Üí‚â§·µá (suc m) (suc n) (s‚â§s m‚â§n) = ‚â§‚Üí‚â§·µá m n m‚â§n

--------------------------------------------Decidable----------------------------------
-- The issue with booleans is that other than evidence, there is nothing we can inspect
-- and therefore nothing we can gain from a single bit of information, from a simple
-- true or false. We can combine the best of both worlds, having a true false statement
-- and evidence that we can observe if we should want to by defining a suitable new
-- datatype: decidable

data Dec (A : Set) : Set where
  yes :   A ‚Üí Dec A
  no  : ¬¨ A ‚Üí Dec A

-- It is straightforward to decide inequality. The convention when deciding something is
-- to use a question mark in its name

_‚â§?_ : ‚àÄ (m n : ‚Ñï) ‚Üí Dec (m ‚â§ n)
zero ‚â§? n = yes z‚â§n
suc m ‚â§? zero = no Œª{ ()}
suc m ‚â§? suc n with m ‚â§? n
...               | yes m‚â§n = yes (s‚â§s m‚â§n)
...               | no  m‚â∞n = no Œª{ (s‚â§s m‚â§n) ‚Üí m‚â∞n m‚â§n}

--------------------------------------Exercises------------------------------------------
_<?_ : ‚àÄ (m n : ‚Ñï) ‚Üí Dec (m < n)
zero <? zero = no Œª{ ()}
zero <? suc n = yes z<s
suc m <? zero = no Œª{ ()}
suc m <? suc n with m <? n
...               | yes m<n = yes (s<s m<n)
...               | no  m‚âÆn = no Œª{ (s<s m<n) ‚Üí m‚âÆn m<n}

_‚â°‚Ñï_ : ‚àÄ (m n : ‚Ñï) ‚Üí Dec (m ‚â° n)
zero ‚â°‚Ñï zero = yes refl
zero ‚â°‚Ñï suc n = no Œª{ ()}
suc m ‚â°‚Ñï zero = no Œª{ ()}
suc m ‚â°‚Ñï suc n with m ‚â°‚Ñï n
...               | yes refl = yes refl
...               | no  m‚â¢n = no Œª{ refl ‚Üí m‚â¢n refl}
-----------------------------------------------------------------------------------------

-- Erasure takes a decidable value to a boolean
-- this means we 'erase' the evidence and just
-- extract the single bit of information
‚åä_‚åã : ‚àÄ {A : Set} ‚Üí Dec A ‚Üí ùîπ
‚åä yes x ‚åã  =  true
‚åä no ¬¨x ‚åã  =  false


-- Using erasure, we can easily derive _‚â§·µá_ from _‚â§?_:
_‚â§·µá‚Ä≤_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùîπ
m ‚â§·µá‚Ä≤ n = ‚åä m ‚â§? n ‚åã


-- Further, if D is a value of type Dec A, then T ‚åä D ‚åã is inhabited exactly when A is inhabited:

toWitness : ‚àÄ {A : Set} {D : Dec A} ‚Üí T ‚åä D ‚åã ‚Üí A
toWitness {A} {yes x} tt  =  x
toWitness {A} {no ¬¨x} ()

fromWitness : ‚àÄ {A : Set} {D : Dec A} ‚Üí A ‚Üí T ‚åä D ‚åã
fromWitness {A} {yes x} _  =  tt
fromWitness {A} {no ¬¨x} x  =  ¬¨x x

-- Using these, we can easily derive that T (m ‚â§·µá‚Ä≤ n) is inhabited exactly when m ‚â§ n is inhabited:

‚â§·µá‚Ä≤‚Üí‚â§ : ‚àÄ {m n : ‚Ñï} ‚Üí T (m ‚â§·µá‚Ä≤ n) ‚Üí m ‚â§ n
‚â§·µá‚Ä≤‚Üí‚â§  =  toWitness

‚â§‚Üí‚â§·µá‚Ä≤ : ‚àÄ {m n : ‚Ñï} ‚Üí m ‚â§ n ‚Üí T (m ‚â§·µá‚Ä≤ n)
‚â§‚Üí‚â§·µá‚Ä≤  =  fromWitness

-- In summary, it is usually best to eschew booleans and rely on decidables.
-- If you need booleans, they and their properties are easily derived from the corresponding decidables.

-------------------------------------------Connectives--------------------------------------------------
-- Decidiability for connectives is equivalent to decidabality for booleans
infixr 6 _‚àß_

_‚àß_ : ùîπ ‚Üí ùîπ ‚Üí ùîπ
true  ‚àß true  = true
false ‚àß _     = false
_     ‚àß false = false

infixr 6 _√ó-dec_

_√ó-dec_ : ‚àÄ {A B : Set} ‚Üí Dec A ‚Üí Dec B ‚Üí Dec (A √ó B)
yes x √ó-dec yes x‚ÇÅ = yes ‚ü® x , x‚ÇÅ ‚ü©
_  √ó-dec no x‚ÇÅ = no Œª{ ‚ü® fst , snd ‚ü© ‚Üí x‚ÇÅ snd}
no x √ó-dec _ = no Œª{ ‚ü® fst , snd ‚ü© ‚Üí x fst}

infixr 5 _‚à®_

_‚à®_ : ùîπ ‚Üí ùîπ ‚Üí ùîπ
true  ‚à® _      = true
_     ‚à® true   = true
false ‚à® false  = false

infixr 5 _‚äé-dec_

_‚äé-dec_ : ‚àÄ {A B : Set} ‚Üí Dec A ‚Üí Dec B ‚Üí Dec (A ‚äé B)
yes x ‚äé-dec _ = yes (inj‚ÇÅ x)
_ ‚äé-dec yes x‚ÇÅ = yes (inj‚ÇÇ x‚ÇÅ)
no a ‚äé-dec no b = no Œª{ (inj‚ÇÅ x) ‚Üí a x ; (inj‚ÇÇ y) ‚Üí b y}

not : ùîπ ‚Üí ùîπ
not true  = false
not false = true

¬¨? : ‚àÄ {A : Set} ‚Üí Dec A ‚Üí Dec (¬¨ A)
¬¨? (yes x) = no Œª x‚ÇÅ ‚Üí x‚ÇÅ x
¬¨? (no x) = yes x

_‚äÉ_ : ùîπ ‚Üí ùîπ ‚Üí ùîπ
_     ‚äÉ true   =  true
false ‚äÉ _      =  true
true  ‚äÉ false  =  false

_‚Üí-dec_ : ‚àÄ {A B : Set} ‚Üí Dec A ‚Üí Dec B ‚Üí Dec (A ‚Üí B)
_ ‚Üí-dec yes x  = yes Œª x‚ÇÇ ‚Üí x
no x ‚Üí-dec _ = yes Œª x‚ÇÇ ‚Üí ‚ä•-elim (x x‚ÇÇ)
yes x ‚Üí-dec no y = no Œª x‚ÇÅ ‚Üí y (x‚ÇÅ x)

---------------------------------------------------------------------------------
‚àß-√ó : ‚àÄ {A B : Set} (x : Dec A) (y : Dec B) ‚Üí ‚åä x ‚åã ‚àß ‚åä y ‚åã ‚â° ‚åä x √ó-dec y ‚åã
‚à®-‚äé : ‚àÄ {A B : Set} (x : Dec A) (y : Dec B) ‚Üí ‚åä x ‚åã ‚à® ‚åä y ‚åã ‚â° ‚åä x ‚äé-dec y ‚åã
not-¬¨ : ‚àÄ {A : Set} (x : Dec A) ‚Üí not ‚åä x ‚åã ‚â° ‚åä ¬¨? x ‚åã

-- These proof are basically nothing but matching over
-- the decidable evidence, as everything already simplifies
-- nicely thanks to the short-circuit definitions of the connectors
‚àß-√ó (yes x) (yes x‚ÇÅ) = refl
‚àß-√ó (yes x) (no x‚ÇÅ) = refl
‚àß-√ó (no x) (yes x‚ÇÅ) = refl
‚àß-√ó (no x) (no x‚ÇÅ) = refl

‚à®-‚äé (yes x) db = refl
‚à®-‚äé (no x) (yes x‚ÇÅ) = refl
‚à®-‚äé (no x) (no x‚ÇÅ) = refl

not-¬¨ (yes x) = refl
not-¬¨ (no x) = refl

---------------------------------------------------------------------------------
_iff_ : ùîπ ‚Üí ùîπ ‚Üí ùîπ
false iff false = true
false iff true  = false
true  iff false = false
true  iff true  = true

_‚áî-dec_ : ‚àÄ {A B : Set} ‚Üí Dec A ‚Üí Dec B ‚Üí Dec (A ‚áî B)
yes x ‚áî-dec yes x‚ÇÅ = yes (record { to = Œª x‚ÇÇ ‚Üí x‚ÇÅ ; from = Œª x‚ÇÇ ‚Üí x })
yes x ‚áî-dec no x‚ÇÅ = no Œª{ record { to = to ; from = from } ‚Üí x‚ÇÅ (to x)}
no x ‚áî-dec yes x‚ÇÅ = no Œª{ record { to = to ; from = from } ‚Üí x (from x‚ÇÅ)}
no x ‚áî-dec no x‚ÇÅ = yes (record { to = Œª x‚ÇÇ ‚Üí ‚ä•-elim (x x‚ÇÇ) ; from = Œª x‚ÇÇ ‚Üí ‚ä•-elim (x‚ÇÅ x‚ÇÇ) })

iff-‚áî : ‚àÄ {A B : Set} (x : Dec A) (y : Dec B) ‚Üí ‚åä x ‚åã iff ‚åä y ‚åã ‚â° ‚åä x ‚áî-dec y ‚åã
iff-‚áî (yes x) (yes x‚ÇÅ) = refl
iff-‚áî (yes x) (no x‚ÇÅ) = refl
iff-‚áî (no x) (yes x‚ÇÅ) = refl
iff-‚áî (no x) (no x‚ÇÅ) = refl
--------------------------Proof by reflection------------------------------------
minus : (m n : ‚Ñï) (n‚â§m : n ‚â§ m) ‚Üí ‚Ñï
minus m       zero    _         = m
minus (suc m) (suc n) (s‚â§s n‚â§m) = minus m n n‚â§m


-- The implicit here is a super neat trick that works as a kind
-- of guard that is checked at type-checking time. The trick works
-- because Agda will fill in an implicit of a record type if it can
-- fill in all its fields. That's why T is defined as an empty record
_-_ : (m n : ‚Ñï) {n‚â§m : T ‚åä n ‚â§? m ‚åã} ‚Üí ‚Ñï
_-_ m n {n‚â§m} = minus m n (toWitness n‚â§m)

-- This works because the implicit is evaluated as T true which is ‚ä§
_ : 5 - 2 ‚â° 3
_ = refl

-- 3 - 5 for instance will throw an error

-- Exercises
toWitnessFalse : ‚àÄ {A : Set} {D : Dec A} ‚Üí ¬¨ T ‚åä D ‚åã ‚Üí ¬¨ A

fromWitnessFalse : ‚àÄ {A : Set} {D : Dec A} ‚Üí ¬¨ A ‚Üí ¬¨ T ‚åä D ‚åã
